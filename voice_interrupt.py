import sounddevice as sd
import queue
import threading

# üîß ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÇ‡∏ü‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ
def get_mic_index_by_name(name_part):
    devices = sd.query_devices()
    for idx, dev in enumerate(devices):
        if name_part.lower() in dev['name'].lower():
            print(f"üîä ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡∏Ñ‡πå: {dev['name']} (index {idx})")
            return idx
    print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏°‡∏Ñ‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÉ‡∏ä‡πâ default ‡πÅ‡∏ó‡∏ô")
    return None

mic_index = get_mic_index_by_name("AMD Streaming Audio Device")
if mic_index is not None:
    sd.default.device = mic_index

# üéß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡∏Ñ‡πå (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏£‡∏±‡∏ô‡πÉ‡∏ô thread)
def start_listening():
    q = queue.Queue()

    def callback(indata, frames, time, status):
        if status:
            print(f"‚ö†Ô∏è Mic Error: {status}")
        q.put(indata.copy())

    def listen_loop():
        with sd.InputStream(samplerate=16000, channels=1, callback=callback):
            while True:
                data = q.get()
                # üîá ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° logic ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ
                pass

    thread = threading.Thread(target=listen_loop, daemon=True)
    thread.start()
    print("üé§ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡∏Ñ‡πå‡πÅ‡∏•‡πâ‡∏ß...")

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ô
if __name__ == "__main__":
    start_listening()
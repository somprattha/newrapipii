import time
import google.auth
from googleapiclient.discovery import build
from threading import Thread

from utils.emotion_analyzer import analyze_emotion
from utils.tts_controller import speak_text
from utils.persona_switcher import switch_persona
from websocket_client import set_emotion_to_vtube  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ WebSocket client

# === ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏Å ===
YOUTUBE_API_KEYS = [
    "AIzaYourKey1",
    "AIzaYourKey2",
    "AIzaYourKey3",  # ‡πÉ‡∏™‡πà‡∏´‡∏•‡∏≤‡∏¢‡∏≠‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠ auto fallback
]
CHANNEL_ID = "UCHi24aU7rjqYiOlTB5W5q9w"

# === ‡∏£‡∏∞‡∏ö‡∏ö auto ‡∏´‡∏°‡∏∏‡∏ô API Key ===
api_index = 0

def get_youtube_service():
    global api_index
    key = YOUTUBE_API_KEYS[api_index % len(YOUTUBE_API_KEYS)]
    api_index += 1
    return build("youtube", "v3", developerKey=key)

# === ‡∏î‡∏∂‡∏á chat id ‡∏à‡∏≤‡∏Å live broadcast ===
def get_live_chat_id(youtube):
    req = youtube.liveBroadcasts().list(
        part="snippet",
        broadcastStatus="active",
        broadcastType="all"
    )
    res = req.execute()
    if not res["items"]:
        return None
    return res["items"][0]["snippet"]["liveChatId"]

# === ‡∏ï‡∏±‡∏ß‡∏´‡∏•‡∏±‡∏Å: ‡∏ü‡∏±‡∏á‡πÅ‡∏ä‡∏ó‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå ===
def listen_chat():
    def run():
        youtube = get_youtube_service()
        chat_id = get_live_chat_id(youtube)
        if not chat_id:
            print("[YouTubeChat] ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Live ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ñ‡πà‡∏≤‡∏¢‡∏ó‡∏≠‡∏î")
            return

        print(f"[YouTubeChat] ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Live Chat ‡πÅ‡∏•‡πâ‡∏ß (ID: {chat_id})")
        nextPageToken = None

        while True:
            try:
                res = youtube.liveChatMessages().list(
                    liveChatId=chat_id,
                    part="snippet,authorDetails",
                    maxResults=200,
                    pageToken=nextPageToken
                ).execute()

                for item in res.get("items", []):
                    msg = item["snippet"]["displayMessage"]
                    author = item["authorDetails"]["displayName"]
                    is_member = item["authorDetails"].get("isChatSponsor", False)
                    superchat = item["snippet"].get("superChatDetails")

                    print(f"[Chat] {author}: {msg}")

                    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå + ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Persona
                    mood = analyze_emotion(msg)
                    switch_persona(mood)

                    # ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡∏á
                    if superchat:
                        amount = superchat["amountDisplayString"]
                        speak_text(f"‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SuperChat {amount} ‡∏ô‡∏∞ {author}~! ‡∏£‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÄ‡∏•‡∏¢ üíñ")
                    elif is_member:
                        speak_text(f"‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ô‡∏∞ {author}~! ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤‡∏ô‡∏≤‡∏ô‡πÜ‡∏ô‡∏∞~")
                    else:
                        speak_text(f"{author} ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤ {msg}")

                nextPageToken = res.get("nextPageToken")
                time.sleep(4.5)  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÇ‡∏î‡∏ô‡∏à‡∏≥‡∏Å‡∏±‡∏î rate
            except Exception as e:
                print("[YouTubeChat] ‚ö†Ô∏è ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", e)
                time.sleep(10)

    Thread(target=run, daemon=True).start()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÑ‡∏õ VTube Studio
def on_chat_message_received(message):
    # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á VTube Studio ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå
    ws = connect_vtube()  # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WebSocket
    emotion = analyze_emotion(message)  # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå
    set_emotion_to_vtube(ws, emotion)  # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ VTube Studio

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
def update_expression_based_on_chat(message):
    on_chat_message_received(message)

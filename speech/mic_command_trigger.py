
import sounddevice as sd
import numpy as np
from faster_whisper import WhisperModel
from tts_manager import stop_speaking
from gemini_api_manager import ask_gemini
from tts_manager import speak
from mic_device_config import get_default_microphone

model = WhisperModel("small", device="cpu", compute_type="int8")

def mic_command_listener():
    default_mic = get_default_microphone()
    if not default_mic:
        print("[MIC] ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÇ‡∏ü‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ")
        return

    samplerate = 16000
    duration = 5  # ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ü‡∏±‡∏á‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    print(f"[MIC] ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡∏Ñ‡πå: {default_mic}")

    while True:
        try:
            print("[MIC] üéôÔ∏è ‡∏ü‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á...")
            audio = sd.rec(int(duration * samplerate), samplerate=samplerate, channels=1, dtype='float32')
            sd.wait()
            audio_data = np.squeeze(audio)

            segments, _ = model.transcribe(audio_data, beam_size=5)
            for segment in segments:
                text = segment.text.strip()
                if text:
                    print(f"[üé§] ‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô‡∏ß‡πà‡∏≤: {text}")
                    stop_speaking()
                    response = ask_gemini(text)
                    if response:
                        print(f"[Gemini] ü§ñ ‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤: {response}")
                        speak(response)
        except KeyboardInterrupt:
            print("[MIC] ‚ùå ‡∏´‡∏¢‡∏∏‡∏î‡∏ü‡∏±‡∏á (KeyboardInterrupt)")
            break
        except Exception as e:
            print(f"[MIC] ‚ùå Error: {e}")

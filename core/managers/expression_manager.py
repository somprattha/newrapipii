import random
from core.vtube.vtube_controller import VTubeController

class ExpressionManager:
    def __init__(self):
        self.vtube = VTubeController()

    async def safe_set_expression(self, expression: str):
        try:
            await self.vtube.set_expression(expression)
        except Exception as e:
            print(f"[ExpressionManager] Failed to set expression: {e}")

    async def analyze_and_set(self, text: str, audio_path: str = None):
        # üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        expression = self.detect_expression_from_text(text)

        # ‚úÖ ‡∏™‡πà‡∏á‡πÑ‡∏õ VTube Studio
        await self.safe_set_expression(expression)

    def detect_expression_from_text(self, text: str) -> str:
        # üåà ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á logic ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ AI ‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á)
        text = text.lower()
        if any(word in text for word in ["‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì", "‡∏Ç‡∏≠‡∏ö‡πÉ‡∏à", "‡∏£‡∏±‡∏Å", "‡πÄ‡∏¢‡πâ", "‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î", "‡∏î‡∏µ‡πÉ‡∏à", "‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°"]):
            return "joy"
        elif any(word in text for word in ["‡∏´‡πà‡∏ß‡∏á‡πÉ‡∏¢", "‡πÄ‡∏õ‡πá‡∏ô‡∏´‡πà‡∏ß‡∏á", "‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å", "‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô"]):
            return "gentle"
        elif any(word in text for word in ["‡πÄ‡∏®‡∏£‡πâ‡∏≤", "‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à", "‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©"]):
            return "sad"
        elif any(word in text for word in ["‡πÇ‡∏Å‡∏£‡∏ò", "‡πÇ‡∏°‡πÇ‡∏´"]):
            return "angry"
        else:
            return random.choice(["neutral", "smile"])  # default

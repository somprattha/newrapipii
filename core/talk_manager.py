import asyncio
import json
import time
from gtts import gTTS
import os
import pygame
from core.vts_controller import VTubeStudioConnector  # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö VTube Studio

# ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ VTube Studio
vts = VTubeStudioConnector()

# ‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
CONFIG_PATH = "config/persona_config.json"

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
def load_config():
    try:
        with open(CONFIG_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {"mode": "talkative", "last_auto_speak_time": 0}  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå
def save_config(cfg):
    with open(CONFIG_PATH, "w", encoding="utf-8") as f:
        json.dump(cfg, f, indent=2, ensure_ascii=False)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ AI ‡∏Ñ‡∏ß‡∏£‡∏û‡∏π‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
def should_talk(interval_sec=120):
    cfg = load_config()
    now = time.time()
    if now - cfg["last_auto_speak_time"] >= interval_sec:
        cfg["last_auto_speak_time"] = now
        save_config(cfg)
        return True
    return False

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏´‡∏°‡∏î‡πÉ‡∏´‡∏°‡πà
def set_mode(new_mode):
    cfg = load_config()
    cfg["mode"] = new_mode
    save_config(cfg)
    print(f"[üß†] ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏û‡∏π‡∏î: {new_mode}")
    send_emotion_to_vts(new_mode)  # ‡∏™‡πà‡∏á‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á VTube Studio ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
def get_mode():
    return load_config().get("mode", "talkative")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏π‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ TTS (gTTS)
def speak(text):
    tts = gTTS(text=text, lang='th')
    tts.save("output.mp3")
    os.system("start output.mp3")  # ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á (Windows)

    # ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ pygame ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
    pygame.mixer.init()
    pygame.mixer.music.load("output.mp3")
    pygame.mixer.music.play()
    while pygame.mixer.music.get_busy():  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
        pygame.time.Clock().tick(10)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á VTube Studio
def send_emotion_to_vts(new_mode):
    if new_mode == "talkative":
        vts.set_emotion("happy")  # ‡∏™‡πà‡∏á‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå "happy"
    elif new_mode == "playful":
        vts.set_emotion("excited")  # ‡∏™‡πà‡∏á‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå "excited"
    elif new_mode == "serious":
        vts.set_emotion("serious")  # ‡∏™‡πà‡∏á‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå "serious"
    else:
        vts.set_emotion("neutral")  # ‡∏™‡πà‡∏á‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå "neutral"
    print(f"üîÆ ‡∏™‡πà‡∏á‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå: {new_mode} ‡πÑ‡∏õ‡∏¢‡∏±‡∏á VTube Studio")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
async def main():
    if should_talk():  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ AI ‡∏Ñ‡∏ß‡∏£‡∏û‡∏π‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        mode = get_mode()  # ‡∏î‡∏∂‡∏á‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        if mode == "talkative":
            speak("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏°‡∏≤‡∏Å")
        elif mode == "playful":
            speak("‡∏Æ‡πà‡∏≤‡πÜ‡πÜ! ‡∏°‡∏≤‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏™‡∏ô‡∏∏‡∏Å‡πÜ ‡∏Å‡∏±‡∏ô‡πÄ‡∏ñ‡∏≠‡∏∞!")
        elif mode == "serious":
            speak("‡πÄ‡∏£‡∏≤‡∏°‡∏≤‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ô‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤")
        else:
            speak("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö!")
    await asyncio.sleep(1)

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
if __name__ == "__main__":
    asyncio.run(main())
# talk_manager.py

import pygame
from gtts import gTTS
import os

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏π‡∏î (TTS)
def speak(text):
    # ‡πÄ‡∏£‡∏¥‡πà‡∏° pygame mixer ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á
    pygame.mixer.init()
    tts = gTTS(text=text, lang='th')  # ‡πÉ‡∏ä‡πâ gTTS ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á
    tts.save("output.mp3")
    pygame.mixer.music.load("output.mp3")
    pygame.mixer.music.play()

    while pygame.mixer.music.get_busy():  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
        pygame.time.Clock().tick(10)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡πÇ‡∏´‡∏°‡∏î‡∏û‡∏π‡∏î
def set_mode(new_mode):
    print(f"[üß†] ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏û‡∏π‡∏î‡πÄ‡∏õ‡πá‡∏ô: {new_mode}")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ AI ‡∏Ñ‡∏ß‡∏£‡∏û‡∏π‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
def should_talk(interval_sec=120):
    # ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ AI ‡∏Ñ‡∏ß‡∏£‡∏û‡∏π‡∏î‡∏ó‡∏∏‡∏Å 2 ‡∏ô‡∏≤‡∏ó‡∏µ
    return True

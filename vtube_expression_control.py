import asyncio
import websockets
import json

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠ token
async def authenticate():
    uri = "ws://localhost:8001"
    async with websockets.connect(uri) as websocket:
        # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠ AuthenticationTokenRequest ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠ Token
        auth_request = {
            "apiName": "VTubeStudioPublicAPI",
            "apiVersion": "1.0",
            "requestID": "authentication_request",
            "messageType": "AuthenticationTokenRequest"
        }
        await websocket.send(json.dumps(auth_request))
        response = await websocket.recv()
        print(f"Received authentication token response: {response}")
        
        # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö Token
        response_data = json.loads(response)
        if "data" in response_data and "authenticationToken" in response_data["data"]:
            token = response_data["data"]["authenticationToken"]
            print(f"Token: {token}")
            return token
        else:
            print("Failed to retrieve authentication token.")
            return None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Expression
async def set_expression(expression_name, token):
    uri = "ws://localhost:8001"
    async with websockets.connect(uri) as websocket:
        # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠ Authentication ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß
        auth_request = {
            "apiName": "VTubeStudioPublicAPI",
            "apiVersion": "1.0",
            "requestID": "authentication_request",
            "authenticationToken": token,
            "messageType": "AuthenticationRequest"
        }
        await websocket.send(json.dumps(auth_request))
        auth_response = await websocket.recv()
        print(f"Received authentication response: {auth_response}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Authentication ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        auth_response_data = json.loads(auth_response)
        if not auth_response_data.get("data", {}).get("authenticated", False):
            print("Authentication failed.")
            return
        
        # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Expression
        expression_request = {
            "apiName": "VTubeStudioPublicAPI",
            "apiVersion": "1.0",
            "requestID": "set_expression_request",
            "messageType": "SetExpressionStateRequest",
            "data": {
                "expression": expression_name
            },
            "authenticationToken": token
        }
        await websocket.send(json.dumps(expression_request))
        
        # ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
        response = await websocket.recv()
        print(f"Response: {response}")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏±‡∏ô
async def vtube_studio_client():
    print("üîå Connecting to VTube Studio...")
    token = await authenticate()
    if token:
        print("‚úÖ Authentication Successful!")
        expression_name = "ËÑ∏Á∫¢"  # ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á Expression ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
        await set_expression(expression_name, token)
    else:
        print("‚ùå Authentication failed.")

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏´‡∏•‡∏±‡∏Å
if __name__ == "__main__":
    asyncio.run(vtube_studio_client())
